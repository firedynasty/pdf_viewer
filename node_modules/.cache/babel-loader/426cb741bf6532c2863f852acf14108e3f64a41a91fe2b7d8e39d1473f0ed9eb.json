{"ast":null,"code":"var _jsxFileName = \"/Users/stanleytan/Documents/25-technical/02-react/05-pdf_auto_scroll/src/components/PDFAutoScroll.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PDFAutoScroll = ({\n  pdfViewerRef\n}) => {\n  _s();\n  // State variables for auto-scroll feature\n  const [autoScrollActive, setAutoScrollActive] = useState(false);\n  const [scrollIntervalSeconds, setScrollIntervalSeconds] = useState(13);\n  const [soundEnabled, setSoundEnabled] = useState(true);\n\n  // References for tracking scroll timing and audio\n  const lastScrollTimeRef = useRef(Date.now());\n  const audioContextRef = useRef(null);\n  const currentPageRef = useRef(1);\n\n  // Function to play a subtle audio beep\n  const playSubtleBeep = useCallback(() => {\n    if (!soundEnabled) return;\n    try {\n      // Create audio context on first use\n      if (!audioContextRef.current) {\n        audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      }\n      const context = audioContextRef.current;\n\n      // Create oscillator for sound generation\n      const oscillator = context.createOscillator();\n      const gainNode = context.createGain();\n\n      // Configure sound properties (gentle, quiet beep)\n      oscillator.type = 'sine';\n      oscillator.frequency.value = 800;\n      gainNode.gain.value = 0.05;\n\n      // Connect audio nodes\n      oscillator.connect(gainNode);\n      gainNode.connect(context.destination);\n\n      // Play very short beep\n      gainNode.gain.setValueAtTime(0.05, context.currentTime);\n      gainNode.gain.exponentialRampToValueAtTime(0.001, context.currentTime + 0.15);\n      oscillator.start();\n      oscillator.stop(context.currentTime + 0.15);\n    } catch (error) {\n      console.error('Error playing notification sound:', error);\n    }\n  }, [soundEnabled]);\n\n  // Function to perform the scroll action in PDF context\n  const performScroll = useCallback(() => {\n    if (!pdfViewerRef.current) return;\n    try {\n      // Get current page and total pages\n      const viewer = pdfViewerRef.current;\n      const currentPage = viewer.currentPageNumber || 1;\n      const totalPages = viewer.pagesCount || 1;\n\n      // Safety check for valid values\n      if (currentPage <= 0 || totalPages <= 0) return;\n\n      // With our new approach, we don't scroll within a page - instead, we move to the next page\n      // after a certain amount of time\n      if (currentPage < totalPages) {\n        // Update our ref for page tracking\n        currentPageRef.current = currentPage + 1;\n\n        // Dispatch event to change page\n        const pageChangeEvent = new CustomEvent('pageChange', {\n          detail: {\n            newPage: currentPage + 1\n          }\n        });\n        document.dispatchEvent(pageChangeEvent);\n      } else {\n        // We're at the last page, nothing to do\n        console.log(\"Reached the last page of the document\");\n      }\n\n      // Update last scroll time\n      lastScrollTimeRef.current = Date.now();\n\n      // Play sound if enabled\n      if (soundEnabled) {\n        playSubtleBeep();\n      }\n    } catch (error) {\n      console.error('Error during auto-scroll:', error);\n      // Don't let errors break the auto-scroll functionality\n      lastScrollTimeRef.current = Date.now();\n    }\n  }, [pdfViewerRef, soundEnabled, playSubtleBeep]);\n\n  // Set up interval for auto-scrolling with error recovery\n  useEffect(() => {\n    let intervalId;\n    let errorCount = 0;\n    if (autoScrollActive) {\n      intervalId = setInterval(() => {\n        try {\n          // Get current time\n          const now = Date.now();\n          // Only scroll if enough time has passed\n          if (now - lastScrollTimeRef.current >= scrollIntervalSeconds * 1000) {\n            performScroll();\n            // Reset error count on successful scroll\n            if (errorCount > 0) errorCount = 0;\n          }\n        } catch (error) {\n          // Error recovery strategy\n          errorCount++;\n          console.error(`Auto-scroll error (${errorCount}/3):`, error);\n\n          // If we encounter too many errors, disable auto-scroll to prevent a bad user experience\n          if (errorCount >= 3) {\n            console.warn(\"Too many auto-scroll errors, disabling auto-scroll\");\n            setAutoScrollActive(false);\n            errorCount = 0;\n\n            // Show error message to user (can be improved with a proper UI notification)\n            alert(\"Auto-scroll has been disabled due to errors. You can try enabling it again or use manual scrolling.\");\n          }\n\n          // Update last scroll time to prevent rapid retries\n          lastScrollTimeRef.current = Date.now();\n        }\n      }, 1000); // Check every second\n    }\n    return () => {\n      if (intervalId) clearInterval(intervalId);\n    };\n  }, [autoScrollActive, performScroll, scrollIntervalSeconds]);\n\n  // Monitor page changes\n  useEffect(() => {\n    // Instead of event listeners, we'll watch for changes to the pageNumber\n    if (pdfViewerRef.current) {\n      const newPage = pdfViewerRef.current.currentPageNumber;\n      if (newPage !== currentPageRef.current) {\n        currentPageRef.current = newPage;\n        lastScrollTimeRef.current = Date.now();\n      }\n    }\n  }, [pdfViewerRef]);\n\n  // Function to increase scroll speed\n  const increaseSpeed = () => {\n    setScrollIntervalSeconds(prev => Math.max(1, prev - 1));\n  };\n\n  // Function to decrease scroll speed\n  const decreaseSpeed = () => {\n    setScrollIntervalSeconds(prev => Math.min(60, prev + 1));\n  };\n\n  // Toggle auto-scroll on/off\n  const toggleAutoScroll = useCallback(() => {\n    setAutoScrollActive(prev => {\n      // Reset timer when turning on\n      if (!prev) {\n        lastScrollTimeRef.current = Date.now();\n      }\n      return !prev;\n    });\n  }, []);\n\n  // Keyboard shortcut for toggling auto-scroll\n  useEffect(() => {\n    const handleKeyDown = e => {\n      // Toggle auto-scroll with \"s\" key\n      if (e.key === 's' || e.key === 'S') {\n        toggleAutoScroll();\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [toggleAutoScroll]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pdf-auto-scroll-controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleAutoScroll,\n      className: `scroll-toggle ${autoScrollActive ? 'active' : ''}`,\n      children: [\"SCROLL \", autoScrollActive ? 'ON' : 'OFF']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"speed-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: increaseSpeed,\n        disabled: scrollIntervalSeconds <= 1,\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"interval-display\",\n        children: [scrollIntervalSeconds, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decreaseSpeed,\n        disabled: scrollIntervalSeconds >= 60,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sound-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"SOUND:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          checked: soundEnabled,\n          onChange: () => setSoundEnabled(true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), \"ON\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          checked: !soundEnabled,\n          onChange: () => setSoundEnabled(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), \"OFF\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n_s(PDFAutoScroll, \"HtsnLDqfC/AUtRp1U0CjOj4pXGY=\");\n_c = PDFAutoScroll;\nexport default PDFAutoScroll;\nvar _c;\n$RefreshReg$(_c, \"PDFAutoScroll\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","PDFAutoScroll","pdfViewerRef","_s","autoScrollActive","setAutoScrollActive","scrollIntervalSeconds","setScrollIntervalSeconds","soundEnabled","setSoundEnabled","lastScrollTimeRef","Date","now","audioContextRef","currentPageRef","playSubtleBeep","current","window","AudioContext","webkitAudioContext","context","oscillator","createOscillator","gainNode","createGain","type","frequency","value","gain","connect","destination","setValueAtTime","currentTime","exponentialRampToValueAtTime","start","stop","error","console","performScroll","viewer","currentPage","currentPageNumber","totalPages","pagesCount","pageChangeEvent","CustomEvent","detail","newPage","document","dispatchEvent","log","intervalId","errorCount","setInterval","warn","alert","clearInterval","increaseSpeed","prev","Math","max","decreaseSpeed","min","toggleAutoScroll","handleKeyDown","e","key","addEventListener","removeEventListener","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","disabled","checked","onChange","_c","$RefreshReg$"],"sources":["/Users/stanleytan/Documents/25-technical/02-react/05-pdf_auto_scroll/src/components/PDFAutoScroll.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\n\nconst PDFAutoScroll = ({ pdfViewerRef }) => {\n  // State variables for auto-scroll feature\n  const [autoScrollActive, setAutoScrollActive] = useState(false);\n  const [scrollIntervalSeconds, setScrollIntervalSeconds] = useState(13);\n  const [soundEnabled, setSoundEnabled] = useState(true);\n  \n  // References for tracking scroll timing and audio\n  const lastScrollTimeRef = useRef(Date.now());\n  const audioContextRef = useRef(null);\n  const currentPageRef = useRef(1);\n  \n  // Function to play a subtle audio beep\n  const playSubtleBeep = useCallback(() => {\n    if (!soundEnabled) return;\n    \n    try {\n      // Create audio context on first use\n      if (!audioContextRef.current) {\n        audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      }\n      \n      const context = audioContextRef.current;\n      \n      // Create oscillator for sound generation\n      const oscillator = context.createOscillator();\n      const gainNode = context.createGain();\n      \n      // Configure sound properties (gentle, quiet beep)\n      oscillator.type = 'sine';\n      oscillator.frequency.value = 800;\n      gainNode.gain.value = 0.05;\n      \n      // Connect audio nodes\n      oscillator.connect(gainNode);\n      gainNode.connect(context.destination);\n      \n      // Play very short beep\n      gainNode.gain.setValueAtTime(0.05, context.currentTime);\n      gainNode.gain.exponentialRampToValueAtTime(0.001, context.currentTime + 0.15);\n      oscillator.start();\n      oscillator.stop(context.currentTime + 0.15);\n    } catch (error) {\n      console.error('Error playing notification sound:', error);\n    }\n  }, [soundEnabled]);\n  \n  // Function to perform the scroll action in PDF context\n  const performScroll = useCallback(() => {\n    if (!pdfViewerRef.current) return;\n    \n    try {\n      // Get current page and total pages\n      const viewer = pdfViewerRef.current;\n      const currentPage = viewer.currentPageNumber || 1;\n      const totalPages = viewer.pagesCount || 1;\n      \n      // Safety check for valid values\n      if (currentPage <= 0 || totalPages <= 0) return;\n      \n      // With our new approach, we don't scroll within a page - instead, we move to the next page\n      // after a certain amount of time\n      if (currentPage < totalPages) {\n        // Update our ref for page tracking\n        currentPageRef.current = currentPage + 1;\n        \n        // Dispatch event to change page\n        const pageChangeEvent = new CustomEvent('pageChange', { \n          detail: { newPage: currentPage + 1 } \n        });\n        document.dispatchEvent(pageChangeEvent);\n      } else {\n        // We're at the last page, nothing to do\n        console.log(\"Reached the last page of the document\");\n      }\n      \n      // Update last scroll time\n      lastScrollTimeRef.current = Date.now();\n      \n      // Play sound if enabled\n      if (soundEnabled) {\n        playSubtleBeep();\n      }\n    } catch (error) {\n      console.error('Error during auto-scroll:', error);\n      // Don't let errors break the auto-scroll functionality\n      lastScrollTimeRef.current = Date.now();\n    }\n  }, [pdfViewerRef, soundEnabled, playSubtleBeep]);\n  \n  // Set up interval for auto-scrolling with error recovery\n  useEffect(() => {\n    let intervalId;\n    let errorCount = 0;\n    \n    if (autoScrollActive) {\n      intervalId = setInterval(() => {\n        try {\n          // Get current time\n          const now = Date.now();\n          // Only scroll if enough time has passed\n          if (now - lastScrollTimeRef.current >= scrollIntervalSeconds * 1000) {\n            performScroll();\n            // Reset error count on successful scroll\n            if (errorCount > 0) errorCount = 0;\n          }\n        } catch (error) {\n          // Error recovery strategy\n          errorCount++;\n          console.error(`Auto-scroll error (${errorCount}/3):`, error);\n          \n          // If we encounter too many errors, disable auto-scroll to prevent a bad user experience\n          if (errorCount >= 3) {\n            console.warn(\"Too many auto-scroll errors, disabling auto-scroll\");\n            setAutoScrollActive(false);\n            errorCount = 0;\n            \n            // Show error message to user (can be improved with a proper UI notification)\n            alert(\"Auto-scroll has been disabled due to errors. You can try enabling it again or use manual scrolling.\");\n          }\n          \n          // Update last scroll time to prevent rapid retries\n          lastScrollTimeRef.current = Date.now();\n        }\n      }, 1000); // Check every second\n    }\n    \n    return () => {\n      if (intervalId) clearInterval(intervalId);\n    };\n  }, [autoScrollActive, performScroll, scrollIntervalSeconds]);\n  \n  // Monitor page changes\n  useEffect(() => {\n    // Instead of event listeners, we'll watch for changes to the pageNumber\n    if (pdfViewerRef.current) {\n      const newPage = pdfViewerRef.current.currentPageNumber;\n      if (newPage !== currentPageRef.current) {\n        currentPageRef.current = newPage;\n        lastScrollTimeRef.current = Date.now();\n      }\n    }\n  }, [pdfViewerRef]);\n  \n  // Function to increase scroll speed\n  const increaseSpeed = () => {\n    setScrollIntervalSeconds(prev => Math.max(1, prev - 1));\n  };\n  \n  // Function to decrease scroll speed\n  const decreaseSpeed = () => {\n    setScrollIntervalSeconds(prev => Math.min(60, prev + 1));\n  };\n  \n  // Toggle auto-scroll on/off\n  const toggleAutoScroll = useCallback(() => {\n    setAutoScrollActive(prev => {\n      // Reset timer when turning on\n      if (!prev) {\n        lastScrollTimeRef.current = Date.now();\n      }\n      return !prev;\n    });\n  }, []);\n  \n  // Keyboard shortcut for toggling auto-scroll\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      // Toggle auto-scroll with \"s\" key\n      if (e.key === 's' || e.key === 'S') {\n        toggleAutoScroll();\n      }\n    };\n    \n    document.addEventListener('keydown', handleKeyDown);\n    \n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [toggleAutoScroll]);\n  \n  return (\n    <div className=\"pdf-auto-scroll-controls\">\n      <button \n        onClick={toggleAutoScroll}\n        className={`scroll-toggle ${autoScrollActive ? 'active' : ''}`}\n      >\n        SCROLL {autoScrollActive ? 'ON' : 'OFF'}\n      </button>\n      \n      <div className=\"speed-controls\">\n        <button onClick={increaseSpeed} disabled={scrollIntervalSeconds <= 1}>-</button>\n        <span className=\"interval-display\">{scrollIntervalSeconds}s</span>\n        <button onClick={decreaseSpeed} disabled={scrollIntervalSeconds >= 60}>+</button>\n      </div>\n      \n      <div className=\"sound-controls\">\n        <span>SOUND:</span>\n        <label>\n          <input\n            type=\"radio\"\n            checked={soundEnabled}\n            onChange={() => setSoundEnabled(true)}\n          />\n          ON\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            checked={!soundEnabled}\n            onChange={() => setSoundEnabled(false)}\n          />\n          OFF\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default PDFAutoScroll;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}